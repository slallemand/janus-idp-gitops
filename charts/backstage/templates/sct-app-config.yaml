apiVersion: v1
stringData:
  app-config.yaml: |
    app:
      # Should be the same as backend.baseUrl when using the `app-backend` plugin.
      #baseUrl: http://backstage:7007
      baseUrl: {{ $.Values.app.baseUrl }}

    organization:
      name: "Red Hat Backstage Helm Chart"

    backend:
      baseUrl: {{ $.Values.backend.baseUrl }}
      listen:
        port: 7007
        host: 0.0.0.0
      csp:
        connect-src: ["'self'", 'http:', 'https:']
      cors:
        origin: {{ $.Values.backend.cors.origin }}
        methods: [GET, POST, PUT, DELETE]
        credentials: true

      database:
        client: pg
        connection:
          host: "${POSTGRES_HOST}"
          port: "${POSTGRES_PORT}"
          user: "${POSTGRES_USER}"
          password: "${POSTGRES_ADMIN_PASSWORD}"
      cache:
        store: memory

      reading:
        allow:
{{- range $item := $.Values.backend.reading.allow }}
          - host: '{{ $item.host }}'
{{- end }}

    integrations:
      gitlab:
{{- range $item := $.Values.integrations.gitlab }}
      - host: {{ $item.host }}
        baseUrl: {{ $item.baseUrl }}
        apiBaseUrl: {{ $item.apiBaseUrl }}
        token: {{ $item.token }}
{{- end }}

    proxy:
      '/quay/api':
        target: '{{ $.Values.quay.host }}'
        headers:
          X-Requested-With: 'XMLHttpRequest'
          # Uncomment the following line to access a private Quay Repository using a token
          Authorization: 'Bearer {{ $.Values.quay.token }}'
        changeOrigin: true
        # Change to "false" in case of using self hosted quay instance with a self-signed certificate
        secure: false

    quay:
      # The UI url for Quay, used to generate the link to Quay
      uiUrl: '{{ $.Values.quay.host }}'

    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'local' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      providers:
        oauth2Proxy: {}

    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options

    catalog:
      rules:
        - allow: [Component, System, API, Resource, Location, Template]
      locations:
{{- range $item := $.Values.catalog.locations }}
        - target: {{ $item.target }}
          type: {{ $item.type }}
          rules:
{{- range $item1 := $item.rules }}
            - allow: {{ $item1.allow }}
{{- end }}
{{- end }}
      providers:
        gitlab:
          selfHosted:
            host: {{ $.Values.catalog.providers.gitlab.selfHosted.host }}
            schedule: # optional; same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { seconds: 10 }
              # supports ISO duration, "human duration" as used in code
              timeout: { seconds: 60 }
        ocm:
          env:
{{- range $item := $.Values.clusters }}
            kubernetesPluginRef: {{ $item.name }}
{{- end }}
            schedule: # optional; same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { seconds: 10 }
              # supports ISO duration, "human duration" as used in code
              timeout: { seconds: 60 }

    argocd:
      appLocatorMethods:
{{- range $item := $.Values.argocd.appLocatorMethods }}
        - type: '{{ $item.type }}'
          instances:
{{- range $item1 := $item.instances }}
            - name: {{ $item1.name }}
              url: 	{{ $item1.url }}
              username: {{ $item1.username }}
              password: {{ $item1.password }}
{{- end }}
{{- end }}

    kubernetes:
      serviceLocatorMethod:
        type: "multiTenant"
      clusterLocatorMethods:
        - type: "config"
          clusters:
{{- range $item := $.Values.clusters }}
            - name: {{ $item.name }}
              url: {{ $item.url }}
              authProvider: "serviceAccount"
              skipTLSVerify: true
              serviceAccountToken: "{{ $item.serviceAccountToken }}"
{{- end }}
      customResources:
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'pipelineruns'
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'taskruns'
        - group: 'route.openshift.io'
          apiVersion: 'v1'
          plural: 'routes'

    enabled:
      kubernetes: true
      techdocs: true
      argocd: true
      sonarqube: false
      keycloak: true
      ocm: true
      github: false
      githubOrg: false
      gitlab: true
      jenkins: false
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: backstage
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: backstage
    app.kubernetes.io/version: v1.7.0
    helm.sh/chart: backstage-0.1.6
  name: backstage-config
type: Opaque